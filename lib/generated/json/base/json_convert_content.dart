// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:cricjass/models/fixtures_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static final Map<String, JsonConvertFunction> convertFuncMap = {
    (FixturesEntity).toString(): FixturesEntity.fromJson,
    (FixturesData).toString(): FixturesData.fromJson,
    (FixturesDataLocalteamDlData).toString():
        FixturesDataLocalteamDlData.fromJson,
    (FixturesDataVisitorteamDlData).toString():
        FixturesDataVisitorteamDlData.fromJson,
    (FixturesDataLeague).toString(): FixturesDataLeague.fromJson,
    (FixturesDataSeason).toString(): FixturesDataSeason.fromJson,
    (FixturesDataLocalteam).toString(): FixturesDataLocalteam.fromJson,
    (FixturesDataVisitorteam).toString(): FixturesDataVisitorteam.fromJson,
    (FixturesDataBatting).toString(): FixturesDataBatting.fromJson,
    (FixturesDataBowling).toString(): FixturesDataBowling.fromJson,
    (FixturesDataRuns).toString(): FixturesDataRuns.fromJson,
    (FixturesDataScoreboards).toString(): FixturesDataScoreboards.fromJson,
    (FixturesDataLineup).toString(): FixturesDataLineup.fromJson,
    (FixturesDataLineupPosition).toString():
        FixturesDataLineupPosition.fromJson,
    (FixturesDataLineupLineup).toString(): FixturesDataLineupLineup.fromJson,
    (FixturesDataManofmatch).toString(): FixturesDataManofmatch.fromJson,
    (FixturesDataManofmatchPosition).toString():
        FixturesDataManofmatchPosition.fromJson,
    (FixturesDataManofseries).toString(): FixturesDataManofseries.fromJson,
    (FixturesDataManofseriesPosition).toString():
        FixturesDataManofseriesPosition.fromJson,
    (FixturesDataReferee).toString(): FixturesDataReferee.fromJson,
    (FixturesDataFirstumpire).toString(): FixturesDataFirstumpire.fromJson,
    (FixturesDataSecondumpire).toString(): FixturesDataSecondumpire.fromJson,
    (FixturesDataTvumpire).toString(): FixturesDataTvumpire.fromJson,
    (FixturesDataWinnerteam).toString(): FixturesDataWinnerteam.fromJson,
    (FixturesDataTosswon).toString(): FixturesDataTosswon.fromJson,
    (FixturesDataVenue).toString(): FixturesDataVenue.fromJson,
    (FixturesLinks).toString(): FixturesLinks.fromJson,
    (FixturesMeta).toString(): FixturesMeta.fromJson,
    (FixturesMetaLinks).toString(): FixturesMetaLinks.fromJson,
  };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<FixturesEntity>[] is M) {
      return data
          .map<FixturesEntity>(
              (Map<String, dynamic> e) => FixturesEntity.fromJson(e))
          .toList() as M;
    }
    if (<FixturesData>[] is M) {
      return data
          .map<FixturesData>(
              (Map<String, dynamic> e) => FixturesData.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLocalteamDlData>[] is M) {
      return data
          .map<FixturesDataLocalteamDlData>((Map<String, dynamic> e) =>
              FixturesDataLocalteamDlData.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataVisitorteamDlData>[] is M) {
      return data
          .map<FixturesDataVisitorteamDlData>((Map<String, dynamic> e) =>
              FixturesDataVisitorteamDlData.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLeague>[] is M) {
      return data
          .map<FixturesDataLeague>(
              (Map<String, dynamic> e) => FixturesDataLeague.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataSeason>[] is M) {
      return data
          .map<FixturesDataSeason>(
              (Map<String, dynamic> e) => FixturesDataSeason.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLocalteam>[] is M) {
      return data
          .map<FixturesDataLocalteam>(
              (Map<String, dynamic> e) => FixturesDataLocalteam.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataVisitorteam>[] is M) {
      return data
          .map<FixturesDataVisitorteam>(
              (Map<String, dynamic> e) => FixturesDataVisitorteam.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataBatting>[] is M) {
      return data
          .map<FixturesDataBatting>(
              (Map<String, dynamic> e) => FixturesDataBatting.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataBowling>[] is M) {
      return data
          .map<FixturesDataBowling>(
              (Map<String, dynamic> e) => FixturesDataBowling.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataRuns>[] is M) {
      return data
          .map<FixturesDataRuns>(
              (Map<String, dynamic> e) => FixturesDataRuns.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataScoreboards>[] is M) {
      return data
          .map<FixturesDataScoreboards>(
              (Map<String, dynamic> e) => FixturesDataScoreboards.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLineup>[] is M) {
      return data
          .map<FixturesDataLineup>(
              (Map<String, dynamic> e) => FixturesDataLineup.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLineupPosition>[] is M) {
      return data
          .map<FixturesDataLineupPosition>((Map<String, dynamic> e) =>
              FixturesDataLineupPosition.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataLineupLineup>[] is M) {
      return data
          .map<FixturesDataLineupLineup>(
              (Map<String, dynamic> e) => FixturesDataLineupLineup.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataManofmatch>[] is M) {
      return data
          .map<FixturesDataManofmatch>(
              (Map<String, dynamic> e) => FixturesDataManofmatch.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataManofmatchPosition>[] is M) {
      return data
          .map<FixturesDataManofmatchPosition>((Map<String, dynamic> e) =>
              FixturesDataManofmatchPosition.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataManofseries>[] is M) {
      return data
          .map<FixturesDataManofseries>(
              (Map<String, dynamic> e) => FixturesDataManofseries.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataManofseriesPosition>[] is M) {
      return data
          .map<FixturesDataManofseriesPosition>((Map<String, dynamic> e) =>
              FixturesDataManofseriesPosition.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataReferee>[] is M) {
      return data
          .map<FixturesDataReferee>(
              (Map<String, dynamic> e) => FixturesDataReferee.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataFirstumpire>[] is M) {
      return data
          .map<FixturesDataFirstumpire>(
              (Map<String, dynamic> e) => FixturesDataFirstumpire.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataSecondumpire>[] is M) {
      return data
          .map<FixturesDataSecondumpire>(
              (Map<String, dynamic> e) => FixturesDataSecondumpire.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataTvumpire>[] is M) {
      return data
          .map<FixturesDataTvumpire>(
              (Map<String, dynamic> e) => FixturesDataTvumpire.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataWinnerteam>[] is M) {
      return data
          .map<FixturesDataWinnerteam>(
              (Map<String, dynamic> e) => FixturesDataWinnerteam.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataTosswon>[] is M) {
      return data
          .map<FixturesDataTosswon>(
              (Map<String, dynamic> e) => FixturesDataTosswon.fromJson(e))
          .toList() as M;
    }
    if (<FixturesDataVenue>[] is M) {
      return data
          .map<FixturesDataVenue>(
              (Map<String, dynamic> e) => FixturesDataVenue.fromJson(e))
          .toList() as M;
    }
    if (<FixturesLinks>[] is M) {
      return data
          .map<FixturesLinks>(
              (Map<String, dynamic> e) => FixturesLinks.fromJson(e))
          .toList() as M;
    }
    if (<FixturesMeta>[] is M) {
      return data
          .map<FixturesMeta>(
              (Map<String, dynamic> e) => FixturesMeta.fromJson(e))
          .toList() as M;
    }
    if (<FixturesMetaLinks>[] is M) {
      return data
          .map<FixturesMetaLinks>(
              (Map<String, dynamic> e) => FixturesMetaLinks.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}
